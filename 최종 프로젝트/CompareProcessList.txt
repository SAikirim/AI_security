void CompareProcessList()
{
HANDLE hSnapshot=CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); //프로세스의 목록을 읽기 위한 스냅샷
HANDLE hHandle; //메모리를 읽어올 프로세스의 핸들을 저장할 변수
DWORD IMAGE_BASE; //프로세스의 모듈을 구해서 저장할 변수. 모듈 = Base Address
DWORD addr = IMAGE_BASE; //주소이동에 사용할 변수, Base Address로 초기화
DWORD value = 0x00000000; //메모리에서 읽어온 값을 저장할 변수
DWORD IMAGE_DESCRIPTOR_RVA = IMAGE_BASE; //IMAGE_DESCRIPTOR_RVA의 주소를 담을 변수, Base Address로 초기화
DWORD FirstThunk_IAT_RVA = IMAGE_BASE; //IMAGE_DESCRIPTOR의 FirstThunk_IAT_RVA의 주소를 담을 변수, Base Address로 초기화
DWORD IMAGE_DESCRIPTOR_SIZE = 0x00000000; //IMAGE_DESCRIPTOR의 크기를 담을 변수
DWORD IMAGE_DESCRIPTOR_CNT = 0x00000001; //반복문에 사용할 카운터 변수



if(hSnapshot)
{
PROCESSENTRY32 ProcessEntry32; //프로세스의 정보를 담을 구조체
BOOL bProcessFound; //프로세스의 정보를 읽었는지 못읽었는지 확인하는 변수
ProcessEntry32.dwSize=sizeof(PROCESSENTRY32); //구조체의 크기 지정
bProcessFound=Process32First(hSnapshot, &ProcessEntry32); //스냅샷에서 제일 처음 프로세스의 정보를 가져온다.


while(bProcessFound)
{
//if(_tcsicmp(ProcessEntry32.szExeFile, _T("notepad.exe")) == 0) { //특정 프로세스의 IAT만 저장하고 싶을 땐 주석 제거 (밑에 짝이 되는 주석도 같이 제거)
hHandle = OpenProcess( PROCESS_VM_READ, FALSE, ProcessEntry32.th32ProcessID); //프로세스의 메모리를 읽기 위해서 PID를 이용하여 해당 프로세스의 핸들을 얻어온다.
IMAGE_BASE = (DWORD)GetProcessModule(ProcessEntry32.th32ProcessID, ProcessEntry32.szExeFile); //PID를 이용하여 해당 프로세스의 모듈 정보를 가져온다. 모듈=Image Base 주소와 같다.



addr = IMAGE_BASE; //읽어올 주소를 모듈 정보로 얻은 프로세스의 Image Base주소로 이동시킨다.
IMAGE_DESCRIPTOR_RVA = IMAGE_BASE; //IMPORT_DIRECTORY의 주소를 담을 변수, Base Address로 초기화
FirstThunk_IAT_RVA = IMAGE_BASE; //IMAGE_DESCRIPTOR의 주소를 담을 변수, Base Address로 초기화
IMAGE_DESCRIPTOR_SIZE = 0x00000000; //IMAGE_DESCRIPTOR의 크기를 담을 변수
IMAGE_DESCRIPTOR_CNT = 0x00000001; //반복문에 사용할 카운터 변수


ReadProcessMemory(hHandle,(LPCVOID)addr,(LPVOID)&value,2,0);
//Image Base에서 처음 2바이트를 읽어온다. 읽어온 값이 5A4D(MZ)이면 PE구조를 갖는다 생각하고 IAT값을 가져오고
//아니면 PE구조를 갖지 않는다 생각하여 IAT 값을 읽어오는 작업을 수행하지 않는다.


if((value&0x00005A4D)==0x5A4D)
{

addr+=0x0000003c; //현재의 주소는 아직 Image Base이고 여기에서 0x0000003C만큼 떨어진 곳에 NT 헤더의 시작주소가 있다. 현재의 주소를 이동시킨다.
ReadProcessMemory(hHandle,(LPCVOID)addr,(LPVOID)&value,4,0); //NT헤더의 시작 주소를 읽어온다.

addr=IMAGE_BASE; //NT헤더의 시작주소로 가기위해 다시 베이스로 돌아오고
addr+=value; //NT헤더의 시작주소로 이동 Image Base + 읽어온 값 = NT헤더의 시작주소
ReadProcessMemory(hHandle,(LPCVOID)addr,(LPVOID)&value,4,0);
//NT헤더의 시작 주소에서 값을 4바이트 읽어온다. 해당 값이 4550, 즉PE..인지 확인하여 PE구조를 가지고 있는지 다시 확인한다.

if(value==0x00004550)
{
_stprintf(a, _T("프로세스 : %s \t PID : %10d"), ProcessEntry32.szExeFile, ProcessEntry32.th32ProcessID); //프로세스명, PID를 문자열 배열에 저장
nLen = GetWindowTextLength(g_hEdit1); //출력
SendMessage(g_hEdit1, EM_SETSEL, nLen, nLen); //출력
SendMessage(g_hEdit1, EM_REPLACESEL, FALSE, (LPARAM)a); //출력
SendMessage(g_hEdit1, EM_REPLACESEL, FALSE, (LPARAM)_T("\n")); //출력
init_list(ProcessEntry32.th32ProcessID); //연결리스트 초기화, head와 tail 초기화한다. 초기화 하면서 현재 PID 정보를 같이 담는다.


addr+=0x00000080; //NT헤더의 시작주소에서 0x00000080만큼 떨어진 곳에 IMAGE_OPTIONAL_HEADER의 IMPORT_TABLE의 RVA가 있다.
ReadProcessMemory(hHandle,(LPCVOID)addr,(LPVOID)&value,4,0); //RVA값을 읽어온다.
IMAGE_DESCRIPTOR_RVA+=value; //읽어온 RVA 값을 변수에 저장한다.


addr+=0x00000004; //RVA다음에 있는 IMPORT Table의 Size로 이동한다.
ReadProcessMemory(hHandle,(LPCVOID)addr,(LPVOID)&value,4,0); //Size의 값을 읽어온다.
IMAGE_DESCRIPTOR_SIZE += value; //읽어온 Size 값을 변수에 저장한다.
IMAGE_DESCRIPTOR_SIZE = IMAGE_DESCRIPTOR_SIZE/0x00000014; //Size의 값을 IMAGE_IMPORT_DESCRIPTOR 구조체의 크기(0x14)로 나눠서 구조체의 개수(몇개의 DLL을 사용하는지)를 구한다.
IMAGE_DESCRIPTOR_SIZE -= 0x00000001; //배열의 마지막은 NULL이므로 하나를 빼준다.


IMAGE_DESCRIPTOR_RVA+=0x00000010; //IMAGE_IMPORT_DESCRIPTOR 구조체에서 0x10을 더해서 구조체 내의 FirtThunk(IAT)의 RVA값을 읽어온다. 흰 책 173p의 표13.7 참조
addr=IMAGE_DESCRIPTOR_RVA;
//현재의 주소(addr)는 IMAGE_DESCRIPTOR_SIZE의 값을 읽어오는곳에 있으므로 NT Header의 IMAGE_DESCRIPTOR_RVA로 이동시킨다. IMAGE_DESCRIPTOR_RVA에는 FirtThunk(IAT)의 주소가 들어있다.
ReadProcessMemory(hHandle,(LPCVOID)addr,(LPVOID)&value,4,0); //FirtThunk(IAT)의 RVA 주소를 읽어온다.
addr=IMAGE_BASE; //FirtThunk(IAT)의 주소로 이동하기 위해 현재의 주소를 다시 Image Base로 옮긴다.
addr+=value; //Image Base에서 FirtThunk(IAT)의 주소만큼 이동한다.
FirstThunk_IAT_RVA=addr;//FirtThunk(IAT)의 주소를 변수에 저장한다.

while(1) //여러 IMAGE_IMPORT_DESCRIPTOR 구조체에서 FirtThunk(IAT)의 주소를 얻어오는 반복문
{
while(1) //구조체 내에서 FirtThunk(IAT)에 있는 함수들의 정보를 얻어오는 반복문
{
ReadProcessMemory(hHandle,(LPCVOID)FirstThunk_IAT_RVA,(LPVOID)&value,4,0);
//FirtThunk(IAT)의 주소에서 4바이트를 읽어 해당 함수의 실행 주소를 얻어온다.
if(value==NULL) //FirstThunk(IAT)의 마지막에는 NULL값이므로 NULL을 만나면 반복문을 종료시킨다.
break;

insert_next(value, head); //읽어온 함수의 실행 주소를 연결리스트에 넣는다.
FirstThunk_IAT_RVA+=0x00000004; //다음 함수의 실행 주소를 읽어오기 위해 주소를 0x4만큼 더한다.
}//FirtThunk(IAT)의 정보 읽어오기 끝

IMAGE_DESCRIPTOR_RVA+=0x00000014;
addr=IMAGE_DESCRIPTOR_RVA;
ReadProcessMemory(hHandle,(LPCVOID)addr,(LPVOID)&value,4,0);
addr=IMAGE_BASE;
addr+=value;
FirstThunk_IAT_RVA=addr;


if(IMAGE_DESCRIPTOR_CNT==IMAGE_DESCRIPTOR_SIZE)
break;
//처음에 구했던 Size의 값을 구조체의 크기(0x14)로 나눠서 구한 구조체의 개수를 이용해서
//CNT를 1에서 1씩 증가시켜 구조체의 개수만큼 증가하면 반복문을 종료한다. .
IMAGE_DESCRIPTOR_CNT+=0x00000001; //CNT 1증가
}
CloseHandle(hHandle); //메모리를 읽기 위해 얻은 핸들을 다시 반납한다.
FindIATHook(head, tail); //연결리스트의 정보를 스택에 집어넣는다.
}
}
// } //특정 프로세스의 IAT만 저장하고 싶을 땐 주석 제거 (위에서 말한 짝)

bProcessFound=Process32Next(hSnapshot, &ProcessEntry32); //프로세스 스냅샷에서 다음 프로세스의 정보를 읽어온다.
}
CloseHandle(hSnapshot); //모든 프로세스의 정보를 읽었으므로 스냅샷을 반납한다.
}
}