에이전트 개발을 담당한 임종철입니다. 이어서 동작 상세 설명입니다.

악성코드 탐지 동작 방식 전에, 딥러닝 에이전트의 이해를 위해,  정상코드 탐지 동작을 보여드리도록 하겠습니다.
* 처음 화면은 화이트리스트가 등장하며, 이 화이트리스트를 이용해 동작시 정상파일에 대한 검사를 패스합니다.
 - 여기 보이는 파일은 '엠디5해시텍스트'파일로 화이트리스 파일입니다.
 - 화이트리스트에 정상 파일의 해시값을 저장함으로써,
 - 검사하지 않고 빠르게 실행할 수 있도록 합니다.

1 보이시는  ‘md5_hash.txt’ 파일은 파일을 해시값으로 저장한 화이트리스트입니다.
2 저장되어 있는 해시값은 노트패드의 해시값입니다.
3 딥러닝 에이전트 실행
4 인젝션이 모습 확인
5 계산기 실행시, 화이트리스트 추가를 확인 가능, 이때 잠시 프로세스가 멈쳐있습니다.
6 계산기 동작 확인
7 화이트리스트 목록 확인 -> 계산기의 해시값 추가 확인
8 다시 계산기를 실행시키면 바로 실행됨을 확인
  - 계산기 닫으면 바로 다음


* 기존 시그니처 기반 에이전트와 저희 딥러닝 기반 에이전트를 비교하겠습니다.
* 기존 시그니처 기반 에이전트 선정 기준은 
  - 낮은 버전의 OS에서 동작하고, 
  - 네이버 다운로드 상위에 속한 타사 에이전트을 사용하였습니다.
* 이때 비교하기 위해 200개의 악성파일 중 타사 에이전트는 45개의 악성파일을 미탐을 하였고, 그 45개 중 저희 딥러닝 기반 에이전트는 11개를 탐지하였습니다.


* '악성코드 탐지' 시연 영상을 보도록 하겠습니다.
1 악성코드로 판별된 파일
2 타사 에이전트로 검사
3 미탐 확인
4 딥러닝 에이전트 실행
5 에이전트의 핵심 기능인 ‘MalDetecter.dll’의 인젝션 확인
6 악성 파일 실행
7 Suspended, PID 확인, 종료
8 딥러닝 에이전트 종료
  - 악성코드가 사라진 후 다음

* 저희 딥러닝 에이전트가 개선된다면 향후 좋아질 점입니다.
1. 현제 저희 딥러닝 에이전트는 파일에서 PE를 추출합니다.
  - 하지만, 바로 메모리에서 PE를 읽을 수 있게 된다면, 
  - '패킹된 파일'도 '분석할 수 있어, 
  - 딥러닝 에이전트의 '성능'을 '향샹'시킬 수 있습니다.
2. 저희는 딥러닝 모델 학습 DNN만 사용하였지만
  - 비지도학습의 선행 활용 
  - 또는 결정트리나 XGBoost 사용하여 병렬적으로 모델을 활용해, 
  - 정확도를 더 개선시킬 수 있을 것으로 여겨집니다.
3. 저희는 CS구조로 딥러닝 에이전트가 동작합니다.
  - 하지만 스마트팩토리 환경을 고려하여 클라이언트 내에서 모든 동작을 할 수 있게 개선한다면,
  - 딥러닝 에이전트의 완성도가 더욱 높아질 것입니다.


* 그럼, 마지막으로 저희 딥러닝 에이전트가 가질수 있는 기대효과입니다.
1. 시그니처 기반의 에이전트들은 잦은 시그니처 업데이트를 위해 일반적으로 인터넷 환경이 필요합니다.
  - 하지만 저희 딥러닝 에이전트는 시그니처 기반이 아니기 때문에, 
 - 인터넷이 연결되지 않은 폐쇄망 환경에서도 좋은 성능을 유지할수 있습니다.
2. 1번 내용과 이어지는 내용으로,  시그니처 기반이 아닌 딥러닝 방식이기 때문에 
  - 시그니처가 '확인'이 안 된 제로데이 악성코드도 예측하여 감염을 막을 수가 있습니다.
3. 시그니처를 업데이트를 하기위해선, 악성코드에 대한 분석이 필요고,  이때 인력과 자원이 투입됩니다.
  - 이때 딥러닝 에이전트를 사용하면, 일차적으로 딥러닝 에이전트가 악성코드를 예측해 주기 때문에, 
  - 악성 코드 판단 및 분석에 인력과 자원 투입를 절감할 수가 있을 것으로 여겨집니다.

