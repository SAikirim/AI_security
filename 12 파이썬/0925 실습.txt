========================================================

클래스 실습

메뉴

A.차량등록
B.차주검색

차량등록

차주 :
색깔 : 
차종 :(sports,suv,truck 중 택일)
차량스펙은 자동으로 입력

          sports   suv      truck  
배기량    5000cc   3000cc   6000cc
구동      후륜     4륜      4륜
최고속도  300km/h  200km/h  200km/h

차주검색

ex)
차주 검색 : 
차량주인 : XXX
차량색깔 : XX
차종 : sports
배기량 : 5000cc
구동 : 후륜
최고속도 : 500km

============================================================================

모듈 실습

해당 내용의 파이썬 파일을 C:\doit1 생성 후에 저장하시오.

#fourcal.py

def numfind():
	while True:
		num=input("number : ")
		a=0
		for c in num:
			if c not in "0123456789.":
				print("숫자로 다시 입력해주세요")
				a=a+1
				break
		if a==0:
			if num.count('.') > 1:
				print("숫자로 다시 입력해주세요")
			elif num.count('.') ==1:
				return float(num)
			else:
				return int(num)	


def add(a,b,c):
	return a+b+c

def sub(a,b,c):
	return a-b-c

def mul(a,b,c):
	return a*b*c

def div(a,b,c):
	return a/b/c


print(add(1,2,3))
print(sub(1,2,3))
print(mul(1,2,3))
print(div(1,2,3))

1) #moduletest1.py 생성
   fourcal 모듈의 numfind, add, mul 함수만 import 시켜서 해당 내용을 코딩하시오.

계산기
A.계산하기
B.나가기

A 실행시

example)
1번째 숫자: 11
2번째 숫자: 22
3번째 숫자: 33 
기호: +

11 + 22 + 33 = 66


2) #moduletest1.py를 복사해서 #moduletest2.py 생성
   fourcal 모듈을 import 시켜서 해당 내용을 코딩하되 fourcal 모듈 실행시 나오는 출력값이 나오지 않도록 fourcal 모듈을 수정 하시오.

5/2/3 의 결과값

5-3-3 의 결과값


3) #fourcal.py를 복사해서 fourcal1.py를 만들고 그 안에 class Morefourcal을 만들어 Morefourcal 클래스 안에 자승을 연산하는 함수 생성
   #modeultest1.py를 수정해서 자승이 연산되도록 하시오.


------------------------------------------------------------------------

C:\doit1 폴더 생성 후 폴더 안에

A/AA/AAA

폴더 생성

A폴더 안에 

#B.py

a="B.py의 a변수"
b="B.py의 b변수"


AA폴더 안에

#BB.py

def bb_print(a,b):
	print(a)
	print(b)

AAA폴더 안에

#BBB.py

print(bb_print(a,b))


BBB.py 실행결과가 다음과 같이 나오도록 설정하시오.

=>"B.py의 a변수"
  "B.py의 b변수"

=========================================================
예외처리 실습

1. 모든 오류에 대해서 "AllError" 을 출력하도록 하시오.


2. 존재하지 않는 파일을 열 경우에 발생하는 오류에 대해서만 "no data" 를 출력하도록 하시오.

3. a={1:2,3:4} 딕셔너리에서 존재하지 않는 키값을 호출할 경우 발생하는 오류에 대해서 오류 메세지를 발생하도록 하시오.

4. "abc" 문자열을 정수로 변환할때 발생하는 오류와 3번에서 발생하는 오류에 대해서 모두 오류메세지를 발생하도록 하시오.

5. NameError 발생 시켰을 때 "123"을 정수로 변환시켜서 출력되도록 하시오.

6. in 뒤에 문자열이나 리스크 형태가 아닌 것을 넣었을 때 아무런 오류도 발생하지 않도록 하시오.

7. 자식 클래스에서 부모 클래스의 메서드를 실행시킬 경우 오류가 발생되서 자식 클래스에 강제로 메서드 오버라이딩을 하도록 하시오.

8. Exception 클래스를 이용해서 입력을 통해서 두숫자 AA와 BB를 입력받고 나누었을 때 나머지가 0가 되면 "AA 와 BB의 나머지는 0 입니다."가 출력되도록 하시오.

9.변수값으로 'A'를 입력할 경우 오류가 발생되서 "'A'를 입력하지마시오." 오류 메세지가 발생하도록 하시오.

10. input() 통해서 숫자를 입력받을 경우 try:...except: 를 통해 숫자를 입력 받아야 통과하도록 해보시오.


========================================================
내장함수 실습

list1=[7,3,5,2,0,6,1,4]  

1. filter 함수를 통해 list1의 각 요소를 2로 나누었을 때 나머지의 값이 1이 되는 것만 출력하시오.

2. map 함수를 이용해서 list1의 요소들을 모두 문자열로 만들어서 list2를 만드시오.

3. list2에 대해서 정열하시오.

4. enumerate 함수를 이용해서 list2의 각 요소들에 대한 아스키코드 값으로 list3을 만드시오.

5. list3의 각 요소들의 총 합과 평균을 구하시오.

6. list3 의 최대값과 최소값을 구하고 최대값/최소값을 했을 때 나눈 몫과 나머지를 구해보시오.

7. list2와 list3를 사용해서 {문자:아스키코드} 형태의 딕셔너리를 만들고 test.txt에 문자열 형태로 저장 후에 출력 되도록 하시오.

8.문자열의 함수가 어떤 것이 있는지 알아보시오.

9. input을 통해 실수를 입력 받아서 소숫점 3자리이후 부터는 반올림 되도록 하시오. 단 숫자형으로 입력했을 경우에만 입력되고 숫자형이 아닐때는 재 입력 창이 뜨도록 하시오.

외장함수 실습

1. cmd 창에서 python을 바로 실행시키고 c:\doit 폴더로 이동해보시오.

2. 현재 위치해 있는 폴더를 출력하시오.

3. 현재 위치에 test1 폴더를 생성하시오.

4. test1폴더 안에 srp.txt를 생성하고 ['가위','바위','보']를 저장하시오.

5. test1폴더 안에 srpuser.txt를 생성하고 input를 통해서 '가위','바위,'보' 중 하나를 10번 입력하고 저장되도록 하시오.

6. srp.txt와 srpuser.txt 를 이용해서 본인이 입력한 가위바위보의 승패를 가려보시오.(hint:random함수)

7. random 함수를 통해서 ('가위','바위','보')를 랜덤하게 10번 출력되게 하시오.(hint:random함수)
