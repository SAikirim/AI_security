2020년 7월 28일

교재 P 30

docker run [옵션] --name [컨테이너 이름] [이미지 이름] [실행명령]
- docker create + docker start 
- -d옵션 : detach. 실행시 백그라운드로 실행
- docker run 실행시 컨테이너에서 실행할 명령을 지정 가능

docker stats
- 전체 구동중인 컨테이너의 상태 확인 
- -a : 구동중이지 않은 컨테이너의 상태 포함
- --no-stream : 지속해서 상태정보를 갱신하지 않고 한번만
- cpu 사용률 정보의 100%는 cpu 한개를 최대한 사용하고 있다는 의미 (CPU 개수에 따라 사용률이 더 올라갈 수 있음)

docker stop [컨테이너명]
- 컨테이너 중지

docker restart [컨테이너명]
- 컨테이너 재시작 (중지-시작)
- 중지된 컨테이너에 수행시 컨테이너 시작

docker rm [컨테이너명]
- 중지된 컨테이너 삭제
- -f : 구동중인 컨테이너도 강제 삭제


docker run -e [환경변수설정]
- 환경변수 : 시스템에 설정되어 사용되는 변수
- 컨테이너 실행 시 변수를 설정하고, 컨테이너 내부 어플리케이션에서 사용하는 방식으로 활용

docker run --cpus [CPU사용률을 숫자로]
- cpu 사용률 제한
- 사용률 1=100%
- CPU 개수에 따라 최대 사용률 변화 
- 기본값은 1

docker run --memory [메모리용량]
- 컨테이너 생성시 메모리 용량 제한
- 기본값은 무제한 (호스트의 메모리 용량)

docker update [사양변경옵션]
- 구동중인 컨테이너의 CPU, 메모리 등 제한조건 변경가능
- 메모리 제한을 기본값(무제한)으로 설정한 컨테이너의 경우 --memory-swap 옵션을 -1로 설정하여야 메모리 제한 변경 가능

docker attach [컨테이너명]
- 실행중인 컨테이너에 표준입출력 연결
- 실행시 -it 옵션으로 입출력 및 터미널을 제공하고 있는 경우 쉘 진입 가능
- 쉘을 제공하지 않는 컨테이너의 경우 연결해도 쉘 미제공 / 프로세스 중지 등 오작동 발생 가능

docker exec [컨테이너] [실행명령]
- 컨테이너에서 명령 수행

docker top
- 컨테이너 실행 프로세스 확인

docker logs 
- 컨테이너 로그 확인

docker cp
- 컨테이너와 호스트 간 파일 복사

docker diff
- 기준 이미지와 컨테이너 간 파일 변화 비교
A : 추가된 파일
C : 변경된 파일
D : 지워진 파일

====================================

Docker Volume
- 기본적으로 컨테이너는 내부적으로만 데이터를 저장
- 컨테이너가 삭제될 경우 내부 데이터도 함께 삭제
 Stateless

컨테이너에서 저장한 데이터를 영구보관하기 위해서는 별도의 위치에 저장 필요
1) Bind mount
- 호스트의 경로를 지정하여 컨테이너로 마운트
- 호스트의 파일에 변화를 줄 수 있으므로 사용에 주의 필요
$ docker run ... -v [호스트경로]:[마운트위치]...
2) Volume
- 데이터 저장용 볼륨을 따로 생성하여 저장
$ docker volume create [볼륨명]
$ docker run .... -v [볼륨명]:[마운트위치]


=====================================

퍼블릭 클라우드 실습
- 클라우드 서비스 가입시 신용카드/체크카드 등 해외결제 가능한 카드가 필요
- 해외결제 가능 카드 : Visa, Master 등 로고
- 해외결제 차단 확인 : 각자 확인

실습 시 가입 후 제공되는 기본(Free Tier)

======================================

Docker Network

1) Bridge Network 
- 사설 네트워크를 생성하여 내부 컨테이너 통신 및 NAPT를 통한 외부 통신이 가능한 네트워크

NAPT : Network Address Port Translation
- 호스트OS가 보유하고 있는 공용IP를 컨테이너가 통신할 때 공유하기 위한 방법 : 통신이 브리지를 통과할 때 IP, Port 등의 정보를 변경시킴

네트워크 생성
docker network create -subnet [서브넷정보] --gateway [게이트웨이정보] [네트워크이름]

2) Host Network
- 원래 호스트의 NIC 정보를 공유하는 네트워크
- 호스트가 사용중인 포트를 함께 사용할 경우 비정상 동작 (80 포트 등)

3) null(none)
- 네트워크 연결이 없는 네트워크(?)
- 통신 연결이 필요없는 컨테이너에서 사용

4) Overlay Network
- Docker Swarm 등 클러스터링 등 목적으로 사용

5) macvlan Network
- 호스트의 물리적인 NIC의 네트워크 대역과 동일한 네트워크대역의 IP를 부여하여 사용
- Promiscuous Mode 설정 필요
Promiscuous mode : 무차별 모드
=> MAC Address가 맞지 않는 패킷도 모두 전달
$ sudo ip link set [인터페이스명] promisc on

네트워크 생성
docker network create -d macvlan -subnet [서브넷정보] --gateway [게이트웨이정보] -o [호스트인터페이스명] [네트워크이름]

=====================================

컨테이너 간 연결

1) link
docker run .... --link [호스트명] ...
- 컨테이너의 /etc/hosts 파일을 수정하여 이름으로 통신 가능

2) 포트포워딩
- 호스트의 특정 포트로 접근시 컨테이너의 지정한 포트로 연결
$ docker run .... -p [호스트포트]:[컨테이너포트]

=======================================

이미지 태그
$ docker tag [기존이미지] [새로만들이미지]
- 태그를 붙일 경우 기존 이미지와 동일한 항목 생성
- 새롭게 복사되는 것은 아님 - 하드링크와 비슷함

이미지 업로드
- docker login : docker hub 로그인
- docker push [이미지정보] : 이미지 업로드

업로드 이미지명 규칙
계정명/이미지명:태그


=======================================

컨테이너를 이미지로 저장
- docker commit [컨테이너명] [이미지정보]

지정한 컨테이너를 지정한 이름의 이미지로 저장

docker export
- 지정한 컨테이너를 하나의 아카이브파일(tar)로 저장

save와 차이점
- save는 이미지를 저장 / export 는 컨테이너를 저장
- save는 계층 정보를 포함 / export는 단일 계층으로 통합

=======================================

Dockerfile
- 이미지 제작 자동화 (IaC)

지정된 지시어를 사용하여 컨테이너 실행

지시어
FROM : 기본 이미지 지정
MAINTAINER : 이미지 작성자 정보
RUN : 이미지 작성시 실행할 내용
CMD : 이미지로부터 만들어진 컨테이너 구동 시 실행
ENTRYPOINT : 이미지로부터 만들어진 컨테이너 구동 시 실행
 ※ ENTRYPOINT 와 CMD 동시 사용시, ENTRYPOINT는 명령어, CMD는 명령어의 인자 형태로 사용됨.
 ※ ENTRYPOINT는 변경불가능하며, CMD는 docker run 실행시 전달하는 파라미터로 변경 가능
EXPOSE : 컨테이너 포트 열기
COPY : 파일 복사
VOLUME : 볼륨(데이터 저장소) 지정
 - 특정 볼륨을 지정하여 연결은 불가
 - 특정 볼륨을 사용하고자 할 경우에는 Dockerfile이 아닌 docker run 명령어 실행의 -v 옵션을 사용하여야 함

Dockerfile로 부터 이미지 작성
$ docker build -t [생성할이미지이름] [Dockerfile경로]
 
